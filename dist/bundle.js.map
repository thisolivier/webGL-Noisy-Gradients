{
  "version": 3,
  "sources": ["../javascript/main.js", "../shaders/vertex.glsl", "../shaders/fragment.glsl", "../javascript/utilities.js", "../javascript/gradients.js", "../javascript/runShaderOnCanvas.js"],
  "sourcesContent": ["import { runShaderOnCanvas } from \"./runShaderOnCanvas.js\";\n\nexport async function setupCanvases() {\n  const spec = [\n    {\n      id: 'glcanvas',\n      style: {\n        position: 'fixed',\n        top: '0',\n        left: '0',\n        width: '100vw',\n        height: '100vh',\n        display: 'block',\n        zIndex: '1',\n        opacity: '0.7',\n        filter: 'blur(3px)'\n      }\n    },\n    {\n      id: 'glcanvasBlurred',\n      style: {\n        position: 'fixed',\n        top: '0',\n        left: '0',\n        width: '100vw',\n        height: '100vh',\n        display: 'block',\n        zIndex: '2',\n        filter: 'blur(1px)',\n        mixBlendMode: 'soft-light',\n        opacity: '1'\n      }\n    }\n  ];\n\n  for (const cfg of spec) {\n    let c = document.getElementById(cfg.id);\n    if (!c) {\n      c = document.createElement('canvas');\n      c.id = cfg.id;\n      Object.assign(c.style, cfg.style);\n      document.body.appendChild(c);\n    }\n  }\n\n  await Promise.all([\n    runShaderOnCanvas('glcanvas'),\n    runShaderOnCanvas('glcanvasBlurred')\n  ]);\n}\n", "#version 300 es\nin vec2 a_position;\nvoid main() {\n  gl_Position = vec4(a_position, 0.0, 1.0);\n}", "#version 300 es\nprecision highp float;\n\n// INPUTS\n\n// general\nuniform vec2  u_resolution;\nuniform float u_sigma;\nuniform sampler2D u_noise1;\nuniform sampler2D u_noise2;\n// for gradient configuations\nuniform int    u_numGradients;\nuniform vec2   u_centers[16];\nuniform float  u_radii[16];\nuniform vec3   u_colours[16];\n\n// OUTPUT\nout vec4 fragColor;\n\n// CONSTANTS\nconst float POINT_SIZE = 2.0;\nconst float NOISE_TILE = 512.0;\nconst float FADE_CUTOFF   = 3.5;\n\nvoid main() {\n  vec2 uv     = gl_FragCoord.xy;\n  vec2 normUV = uv / u_resolution;\n\n  vec2 cell    = floor(uv / POINT_SIZE) * POINT_SIZE + 0.5 * POINT_SIZE;\n  vec2 noiseUV = cell / NOISE_TILE;\n  float n1 = texture(u_noise1, noiseUV).r;\n  float n2 = texture(u_noise2, noiseUV).r;\n\n  vec3 col = vec3(1.0);\n\n  for (int i = 0; i < 16; i++) {\n    if (i >= u_numGradients) break;\n\n    vec2 c = u_centers[i];\n    float r = u_radii[i];\n    vec3 colour = u_colours[i];\n\n    // 1) Work out distances between the fragment and gradient center\n    vec2 delta = uv - c;\n    float dist2 = dot(delta, delta); // pixel\u00B2 space so no quare root needed\n    float fadeCutoff2 = FADE_CUTOFF * FADE_CUTOFF * r * r;\n\n    if (dist2 >= fadeCutoff2) continue;\n\n    float prob = exp(-dist2 / (2.0 * r * r));\n\n    // 4) dot-layer tests & colour multiply\n    if (n1 < prob) col *= colour;\n    if (n2 < prob) col *= colour;\n  }\n\n  fragColor = vec4(col, 1.0);\n}", "// ----- Utilities -----\n/**\n * Convert RGB (0\u2013255) to normalised values suitable for GLSL vec3.\n * @param {number[]} array8bit - An array of numbers (0\u2013255) to convert, e.g. [0, 255, 127]\n * @returns {number[]} An array of normalised values e.g. [0, 1, 0.498]\n */\nexport function normaliser8Bit(array8bit) {\n  // normalize to 0\u20131\n  return (array8bit.map(val => (val / 255).toFixed(4)));\n}\n\nfunction compileShader(gl, type, src) {\n  const s = gl.createShader(type);\n  gl.shaderSource(s, src);\n  gl.compileShader(s);\n  if (!gl.getShaderParameter(s, gl.COMPILE_STATUS)) {\n    console.error(gl.getShaderInfoLog(s));\n    gl.deleteShader(s);\n    return null;\n  }\n  return s;\n}\n\nexport function createProgram(gl, vsSrc, fsSrc) {\n  const vs = compileShader(gl, gl.VERTEX_SHADER, vsSrc);\n  const fs = compileShader(gl, gl.FRAGMENT_SHADER, fsSrc);\n  const prog = gl.createProgram();\n  gl.attachShader(prog, vs);\n  gl.attachShader(prog, fs);\n  gl.linkProgram(prog);\n  if (!gl.getProgramParameter(prog, gl.LINK_STATUS)) {\n    console.error(gl.getProgramInfoLog(prog));\n    return null;\n  }\n  return prog;\n}\n\nexport function initFullScreenQuad(gl) {\n  const buf = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, buf);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\n    -1, -1,   1, -1,   -1, 1,\n      1,  1,  -1,  1,    1, -1\n  ]), gl.STATIC_DRAW);\n  return buf;\n}\n\nexport function loadTextureAsync(gl, src, unit) {\n  return new Promise(resolve => {\n    const tex = gl.createTexture();\n    gl.activeTexture(gl.TEXTURE0 + unit);\n    gl.bindTexture(gl.TEXTURE_2D, tex);\n    // placeholder pixel\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.R8, 1, 1, 0, gl.RED, gl.UNSIGNED_BYTE, new Uint8Array([128]));\n    const img = new Image();\n    img.src = src;\n    img.onload = () => {\n      gl.activeTexture(gl.TEXTURE0 + unit);\n      gl.bindTexture(gl.TEXTURE_2D, tex);\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.R8, gl.RED, gl.UNSIGNED_BYTE, img);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n      resolve();\n    };\n  });\n}", "// All Colours should be input in HSL format\nexport const gradients = [\n  {\n    xNorm: 0.9,\n    yNorm: -0.1,\n    speed: 1,\n    radius: 0.2,\n    colour: [238, 130, 255], // pink\n  }, \n  {\n    xNorm: 0.4,\n    yNorm: 0.15,\n    speed: 0.3,\n    radius: 0.3,\n    colour: [255, 228, 0], // yellow\n  }, \n  {\n    xNorm: 0.01,\n    yNorm: 0.7,\n    speed: 0.3,\n    radius: 0.2,\n    colour: [244, 176, 255], // pink\n  },\n  {\n    xNorm: 0.2,\n    yNorm: 1.3,\n    speed: 0.6,\n    radius: 0.2,\n    colour: [255, 249, 77], // yellow\n  }, \n  {\n    xNorm: 0.8,\n    yNorm: 0.7,\n    speed: 0.4,\n    radius: 0.1,\n    colour: [171, 254, 255] // light blue\n  },\n  // up to 16 entries\n];\n", "import vertexSource from \"../shaders/vertex.glsl\";\nimport fragmentSource from \"../shaders/fragment.glsl\";\n\nimport {\n  normaliser8Bit,\n  createProgram,\n  initFullScreenQuad,\n  loadTextureAsync\n} from \"./utilities.js\";\n\nimport { gradients } from \"./gradients.js\";\n\nexport async function runShaderOnCanvas(canvasName) {\n  const canvas = document.getElementById(canvasName);\n  const gl = canvas.getContext('webgl2');\n  if (!gl) { alert('WebGL2 required'); return; }\n\n  // compile and link the program. When bundled, vertexSource and\n  // fragmentSource are inlined; otherwise fall back to fetching them.\n  const vsSrc = vertexSource;\n  const fsSrc = fragmentSource;\n  const prog = createProgram(gl, vsSrc, fsSrc);\n  gl.useProgram(prog);\n\n  // general attributed and locations\n  const posLoc  = gl.getAttribLocation(prog, 'a_position');\n  const uRes    = gl.getUniformLocation(prog, 'u_resolution');\n  const uSig    = gl.getUniformLocation(prog, 'u_sigma');\n  const uN1     = gl.getUniformLocation(prog, 'u_noise1');\n  const uN2     = gl.getUniformLocation(prog, 'u_noise2');\n  // related to gradients\n  const uNumGrad     = gl.getUniformLocation(prog, 'u_numGradients');\n  const uCArray      = gl.getUniformLocation(prog, 'u_centers');\n  const uRArray      = gl.getUniformLocation(prog, 'u_radii');\n  const uColourArray = gl.getUniformLocation(prog, 'u_colours');\n\n  // set up quad buffer\n  initFullScreenQuad(gl);\n  gl.enableVertexAttribArray(posLoc);\n  gl.vertexAttribPointer(posLoc, 2, gl.FLOAT, false, 0, 0);\n\n  // load both noise textures\n  await Promise.all([\n    loadTextureAsync(gl, '../images/bn_4.png', 0),\n    loadTextureAsync(gl, '../images/bn_5.png', 1),\n  ]);\n  // tell the shader which unit each sampler uses\n  gl.uniform1i(uN1, 0);\n  gl.uniform1i(uN2, 1);\n\n  // resize & draw whenever needed\n  function resize() {\n    canvas.width  = canvas.clientWidth;\n    canvas.height = canvas.clientHeight;\n    gl.viewport(0, 0, canvas.width, canvas.height);\n  }\n\n  function draw() {\n    resize();\n\n    const scrollY = window.scrollY || window.pageYOffset;\n    const bodyHeight  = document.body.scrollHeight;\n    const viewHeight  = window.innerHeight;\n    const scrollRange = bodyHeight - viewHeight;\n\n    // \u2500\u2500 DATA-DRIVEN GRADIENTS SETUP \u2500\u2500\n    // 1) Gather into flat arrays:\n    const centres = [];\n    const radii   = [];\n    const colours = [];\n    // Note: yNorm and radius are also scaled using canvas.width\n    // so that all positioning is relative to screen width for consistency.\n    // This creates a square-based coordinate system even in tall viewports.\n    for (let g of gradients) {\n      // screen-space X\n      const x = canvas.width * g.xNorm;\n      // screen-space Y\n      // `(g.yNorm * canvas.width)` converts our fractional (based on width) vertical pos into pixel size\n      // `+ canvas.height` pushes it to the TOP of the canvas (0,0 is in the bottom left)\n      // `scrollY * g.speed` gives out scrolling parralax behaviour\n      const y = (g.yNorm * canvas.width * -1) + canvas.height + scrollY * g.speed;\n      centres.push(x, y);\n      radii.push(g.radius * canvas.width);\n      colours.push(...(normaliser8Bit(g.colour)));\n    }\n    // 2) update gradient inputs\n    gl.uniform1i(uNumGrad, gradients.length);\n    gl.uniform2fv(uCArray, centres);\n    gl.uniform1fv(uRArray, radii);\n    gl.uniform3fv(uColourArray, colours);\n\n    // update uniforms\n    gl.uniform2f(uRes, canvas.width, canvas.height);\n    gl.uniform1f(uSig, Math.min(canvas.width, canvas.height) * 0.25);\n\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n  }\n\n  window.addEventListener('scroll', draw);\n  window.addEventListener('resize', draw);\n  draw();\n}\n"],
  "mappings": "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",
  "names": []
}
